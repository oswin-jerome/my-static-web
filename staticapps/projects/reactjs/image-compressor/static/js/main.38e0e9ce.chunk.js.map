{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","size","showLoader","showDownload","className","href","id","this","class","enctype","method","action","type","name","placeholder","onChange","e","console","log","target","value","setState","files","img","onClick","a","options","maxSizeMB","useWebWorker","imageCompression","compressedFile","downloadLink","URL","createObjectURL","link","download","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,qMCiH5BC,E,YAxGb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAM,CAETC,KAAK,IACLC,YAAW,EACXC,cAAa,GANC,E,sEAWT,IAAD,OAsBN,OACE,yBAAKC,UAAU,OACb,6BACE,uBAAGA,UAAU,QAAb,qBACA,uBAAGC,KAAK,yBAAwB,uBAAGD,UAAU,QAAb,IAAqB,0BAAME,GAAG,KAAT,MAArB,mBAGjCC,KAAKP,MAAME,WAAW,yBAAKE,UAAU,UACpC,yBAAKI,MAAM,YAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,+BAC9G,wBAAIJ,UAAU,KAAd,gBACK,KAEP,yBAAKA,UAAU,aACX,0BAAMA,UAAU,OAAOE,GAAG,MAAOG,QAAQ,sBAAsBC,OAAO,OAAOC,OAAO,KAChF,2BAAOC,KAAK,SAASC,KAAK,OAAOP,GAAG,OAAOQ,YAAY,sBAAsBC,SAAU,SAACC,GACtFC,QAAQC,IAAIF,EAAEG,OAAOC,OACrB,EAAKC,SAAS,CACZpB,KAAMe,EAAEG,OAAOC,WAInB,2BAAOR,KAAK,OAAOC,KAAK,QAAQP,GAAG,QAAQS,SAAU,SAACC,GACpDC,QAAQC,IAAIF,EAAEG,OAAOG,MAAM,IAC3B,EAAKD,SAAS,CACZE,IAAKP,EAAEG,OAAOG,MAAM,GACpBnB,cAAa,EACbD,YAAW,OAIdK,KAAKP,MAAMG,aAAa,KAAK,2BAAOS,KAAK,SAASQ,MAAM,SAAShB,UAAU,UAAUoB,QAAO,uCAAG,WAAOR,GAAP,mBAAAS,EAAA,6DAE9F,EAAKJ,SAAS,CACZnB,YAAY,IAEVwB,EAAU,CACZC,UAAU,EAAK3B,MAAMC,KAAK,IAC1B2B,cAAa,GAP+E,kBAW/DC,YAAiB,EAAK7B,MAAMuB,IAAIG,GAX+B,OAWtFI,EAXsF,OAY9Fb,QAAQC,IAAI,OACVD,QAAQC,IAAIY,GAELC,EAAeC,IAAIC,gBAAgBH,GAEzC,EAAKT,SAAS,CACZa,KAAMH,EACLI,SAASL,EAAejB,KACxBV,cAAa,EACbD,YAAW,IArB6E,kDAwB5Fe,QAAQC,IAAR,MAxB4F,0DAAH,wDA8B5FX,KAAKP,MAAMG,aAAa,uBAAGC,UAAU,WAAWC,KAAME,KAAKP,MAAMkC,KAAMC,SAAU,cAAc5B,KAAKP,MAAMmC,UAAlF,YAAyG,Y,GAhGhIC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.38e0e9ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\nimport imageCompression from 'browser-image-compression';\n\nclass App extends React.Component{\n  \n\n  constructor(props){\n    super(props)\n    this.state={\n      // img:\"\",\n      size:500,\n      showLoader:false,\n      showDownload:false\n    }\n  }\n\n\n  render(){\n\n    function compressAction(img,size) {\n\n  \n      const config = {\n        headers: {\n          'content-type': 'application/json',\n        }\n      };\n      \n      var form = new FormData();\n      form.append('size',size);\n      form.append('img',img);\n      console.log(size)\n      \n      axios.post('/', form).then((data) => {\n        console.log(data)\n      });\n\n    }\n\n    return (\n      <div className=\"App\">\n        <nav>\n          <p className=\"logo\">Image compressor </p> \n          <a href=\"https://oswin1998.cf/\"><p className=\"name\"> <sapn id=\"s\">by</sapn> Oswin Jerome</p></a>\n        </nav>\n\n        {this.state.showLoader?<div className=\"loader\">\n          <div class=\"lds-grid\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n          <h1 className=\"h\">Compressing</h1>\n        </div>:null}\n\n        <div className=\"conatiner\">\n            <form className=\"form\" id=\"frm\"  enctype=\"multipart/form-data\" method=\"POST\" action=\"/\"> \n                <input type=\"number\" name=\"size\" id=\"size\" placeholder=\"Picture size in px \" onChange={(e)=>{\n                  console.log(e.target.value)\n                  this.setState({\n                    size: e.target.value\n                  })\n                }}></input>\n                \n                <input type=\"file\" name=\"image\" id=\"image\" onChange={(e)=>{\n                  console.log(e.target.files[0])\n                  this.setState({\n                    img: e.target.files[0],\n                    showDownload:false,\n                    showLoader:false\n                  })\n                  \n                }}></input>\n                {this.state.showDownload?null:<input type=\"button\" value=\"submit\" className=\"convert\" onClick={ async (e)=>{\n                  // compressAction(this.state.img,this.state.size)\n                  this.setState({\n                    showLoader: true\n                  })\n                  var options = {\n                    maxSizeMB:this.state.size/1000,\n                    useWebWorker:true\n                  }\n                  try{\n\n                    const compressedFile = await imageCompression(this.state.img,options);\n                  console.log(\"err\")\n                    console.log(compressedFile)\n                    \n                     const downloadLink = URL.createObjectURL(compressedFile)\n                    //  document.getElementById('preview-after-compress').src = downloadLink\n                     this.setState({\n                       link: downloadLink,\n                        download:compressedFile.name,\n                        showDownload:true,\n                        showLoader:false\n                     })\n                  }catch(err){\n                    console.log(err)\n                  }\n\n\n                }}></input>}\n\n                {this.state.showDownload?<a className=\"download\" href={this.state.link} download={'compressed-'+this.state.download}>DOWNLOAD</a>:null}\n            </form>\n            \n        </div>\n      </div>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}